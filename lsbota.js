const { vk, getVkNameById, questionManager } = require('./VK')

const { exchange, profile } = require('./keyboard')

const { User, Promo, Use } = require('./db')

const { isNumeric } = require('./tools')

vk.updates.use(questionManager.middleware);

const { API, resolveResource } = require('vk-io');

function lsmanager(msg) {
    const commands = {
        myprofile: async () => {
            const name = await getVkNameById(msg.senderId)
            const findUser = await User.findOne({ id: msg.senderId });
            return msg.send(`üëÄ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüòº –ù–∏–∫: ${findUser.nick}\nüí∏ –í—ã–∏–≥—Ä–∞–Ω–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: ${new Intl.NumberFormat('ru-RU').format(findUser.profit)} –ú–ö\nüí∞ –ò–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å: ${(findUser.stavka == 'none') ? `${new Intl.NumberFormat('ru-RU').format(findUser.money)} –ú–ö` : `–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –≤—ã —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç–µ.`}\nüí≥ –î–æ–Ω–∞—Ç-—Å—á—ë—Ç: ${new Intl.NumberFormat('ru-RU').format(findUser.donate)}‚ÇΩ`,
                {
                    keyboard: profile
                })
        },
        changenick: async () => {
            const name = await getVkNameById(msg.senderId)
            const findUser = await User.findOne({ id: msg.senderId });
            const answer = await msg.question(`‚úè ${name}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫:`)
            const check = await User.findOne({ nick: answer.text })
            console.log(check)
            if (check) {
                return msg.send(`‚ùå –î–∞–Ω–Ω—ã–π –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç!`)
            }
            findUser.nick = answer.text
            findUser.save()
            return msg.send(`‚úÖ –í–∞—à –Ω–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${answer.text}!`)
        },
        donate: async () => {
            const name = await getVkNameById(msg.senderId)
            const findUser = await User.findOne({ id: msg.senderId });
            return msg.send(`‚≠êÔ∏è –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –¥–æ–Ω–∞—Ç –º–∞–≥–∞–∑–∏–Ω–µ!\n\nüí≥ –í–∞—à —Å—á—ë—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: ${findUser.donate}‚ÇΩ`,
                {
                    keyboard: exchange
                })
        },
        exchange: async () => {
            const name = await getVkNameById(msg.senderId)
            const findUser = await User.findOne({ id: msg.senderId });
            let answer = await msg.question(`ü§ù –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–æ–Ω–∞—Ç-–º–æ–Ω–µ—Ç –Ω–∞ –≤–∞–ª—é—Ç—É –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç (1‚ÇΩ = 1000 –ú–ö)\n\n‚úè –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:`)
            const answerIsNumeric = isNumeric(answer.text)
            if (Number(answer.text) < 0) return msg.send(`‚ùå –û–±–º–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0!`)
            if (!answerIsNumeric) return
            if (Number(answer.text) > findUser.donate) return msg.send(`‚ùå –ù–∞ –¥–æ–Ω–∞—Ç-—Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`)

            findUser.money += answer.text * 1000
            findUser.donate -= answer.text
            findUser.save()
            return msg.send(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ ${answer.text}‚ÇΩ –Ω–∞ ${new Intl.NumberFormat('ru-RU').format(answer.text * 1000)} –ú–ö`)
        },
        topday: async () => {
            const name = await getVkNameById(msg.senderId)
            const findUser = await User.findOne({ id: msg.senderId });
            const toppers = await User.find({ topday: { $gt: 0 } }).sort({ topday: -1 }).limit(10)
            let visual = []
            let pos = 0

            for (i in toppers) {
                if (!visual.includes(`${toppers[i].nick} - ${toppers[i].topday} –ú–ö`)) {
                    visual.push(`${pos += 1}. [vk.com/id${toppers[i].id}|${toppers[i].nick}] - ${new Intl.NumberFormat('ru-RU').format(toppers[i].topday)} –ú–ö ${(pos == 1) ? `(–ø—Ä–∏–∑ - 1.000.000 –ú–ö).` : (pos == 2) ? `(–ø—Ä–∏–∑ - 750.000 –ú–ö).` : (pos == 3) ? `(–ø—Ä–∏–∑ - 500.000 –ú–ö).` : (pos == 4) ? `(–ø—Ä–∏–∑ - 250.000 –ú–ö).` : (pos == 5) ? `(–ø—Ä–∏–∑ - 100.000 –ú–ö).` : (pos == 6) ? `(–ø—Ä–∏–∑ - 50.000 –ú–ö).` : (pos == 7) ? `(–ø—Ä–∏–∑ - 30.000 –ú–ö).` : (pos == 8) ? `(–ø—Ä–∏–∑ - 25.000 –ú–ö).` : (pos == 9) ? `(–ø—Ä–∏–∑ - 15.000 –ú–ö).` : (pos == 10) ? `(–ø—Ä–∏–∑ - 5.000 –ú–ö).` : ''}`)
                }
            }

            return msg.send(`üìÜ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n${visual.join(`\n`)}\n\nüí∏ –í–∞—à –≤—ã–∏–≥—Ä—ã—à –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${new Intl.NumberFormat('ru-RU').format(findUser.topday)} –ú–ö`)
        },
        topmonth: async () => {
            const name = await getVkNameById(msg.senderId)
            const findUser = await User.findOne({ id: msg.senderId });
            const toppers = await User.find({ topmonth: { $gt: 0 } }).sort({ topmonth: -1 }).limit(10)
            let visual = []
            let pos = 0

            for (i in toppers) {
                if (!visual.includes(`${toppers[i].nick} - ${toppers[i].topmonth} –ú–ö`)) {
                    visual.push(`${pos += 1}. [vk.com/id${toppers[i].id}|${toppers[i].nick}] - ${new Intl.NumberFormat('ru-RU').format(toppers[i].topmonth)} –ú–ö ${(pos == 1) ? `(–ø—Ä–∏–∑ - 10.000.000 –ú–ö).` : (pos == 2) ? `(–ø—Ä–∏–∑ - 5.000.000 –ú–ö).` : (pos == 3) ? `(–ø—Ä–∏–∑ - 2.500.000 –ú–ö).` : (pos == 4) ? `(–ø—Ä–∏–∑ - 1.500.000 –ú–ö).` : (pos == 5) ? `(–ø—Ä–∏–∑ - 1.000.000 –ú–ö).` : (pos == 6) ? `(–ø—Ä–∏–∑ - 750.000 –ú–ö).` : (pos == 7) ? `(–ø—Ä–∏–∑ - 500.000 –ú–ö).` : (pos == 8) ? `(–ø—Ä–∏–∑ - 250.000 –ú–ö).` : (pos == 9) ? `(–ø—Ä–∏–∑ - 100.000 –ú–ö).` : (pos == 10) ? `(–ø—Ä–∏–∑ - 50.000 –ú–ö).` : ''}`)
                }
            }

            return msg.send(`üìÜ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n${visual.join(`\n`)}\n\nüí∏ –í–∞—à –≤—ã–∏–≥—Ä—ã—à –∑–∞ –º–µ—Å—è—Ü: ${new Intl.NumberFormat('ru-RU').format(findUser.topmonth)} –ú–ö.`)
        },
        transfer: async () => {
            const name = await getVkNameById(msg.senderId)
            const findUser = await User.findOne({ id: msg.senderId });
            const id = await msg.question(`‚úè ${findUser.nick}, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥:`)

            const resource = await resolveResource({
                api: vk.api,
                resource: id.text
            })
                .then(async function (res) {
                    const getter = await User.findOne({ id: res.id })
                    if (!getter) {
                        return msg.send(`‚ùå –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ!`)
                    } else {
                        const sum = await msg.question(`‚úè –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:`)
                        const answerIsNumeric = isNumeric(sum.text)
                        if (Number(sum.text) < 0) return msg.send(`‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0!`)
                        if (Number(sum.text) > findUser.money) return msg.send(`‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞!`)
                        if (!answerIsNumeric) return

                        getter.money += Number(sum.text)
                        getter.save()
                        findUser.money -= Number(sum.text)
                        findUser.save()

                        msg.send(`üòÄ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç [vk.com/id${findUser.id}|${findUser.nick}] –≤ —Ä–∞–∑–º–µ—Ä–µ ${new Intl.NumberFormat('ru-RU').format(sum.text)} –ú–ö.`, { user_id: res.id })
                        return msg.send(`‚úîÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ ${new Intl.NumberFormat('ru-RU').format(sum.text)} –ú–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [vk.com/id${getter.id}|${getter.nick}].`)


                    }
                })
                .catch(err => {
                    console.log(err)
                    return msg.send(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–π–¥–∏.`)
                })
        },
        usepromo: async() => {
            const findUser = await User.findOne({ id: msg.senderId });
            const name = await msg.question(`‚úè –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:`)
            const promo = await Promo.findOne({ name: name.text })
            const check = await Use.findOne({ id: msg.senderId, name: name.text })

            if(check) return msg.send(`‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!`)
            if(!promo) return msg.send(`‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`)
            if(promo.maxactivations <= promo.activations) return msg.send(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞!`)

            findUser.money += promo.bonus;
            await findUser.save()
            promo.activations += 1
            await promo.save()

            const newUse = new Use({
                id: msg.senderId,
                name: name.text
            })
    
            newUse.save((error) => {
    
                if (error) {
                    console.log(error)
                    return 'Internal Server Error'
                }
    
            });

            return msg.send(`‚úîÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ ${name.text} –∏ –ø–æ–ª—É—á–∏–ª–∏ ${new Intl.NumberFormat('ru-RU').format(promo.bonus)} –ú–ö –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.`)
        },
        createpromo: async() => {
            const name = await msg.question(`‚úè –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:`)
            const check = await Promo.findOne({ name: name.text })
            if(check) return msg.send(`—Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)

            const activations = await msg.question(`‚úè –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:`)
            const answerIsNumeric = isNumeric(activations.text)
            if(!answerIsNumeric) return

            const bonus = await msg.question(`‚úè –≤–≤–µ–¥–∏ –ø—Ä–∏–∑ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞:`)
            const answersNumeric = isNumeric(bonus.text)
            if(!answersNumeric) return

            const newPromo = new Promo({
                name: name.text,
                maxactivations: Number(activations.text),
                bonus: Number(bonus.text),
                activations: 0
            })
    
            newPromo.save((error) => {
    
                if (error) {
                    console.log(error)
                    return 'Internal Server Error'
                }
    
            });

            return msg.send(`–ø—Ä–æ–º–æ–∫–æ–¥ ${name.text} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–∞ ${activations.text} –∞–∫—Ç–∏–≤–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–æ–º ${bonus.text} –ú–ö.`)
        },
        deletepromo: async() => {
            const name = await msg.question(`‚úè –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:`)

            const check = await Promo.findOne({ name: name.text })
            if(!check) return msg.send(`—Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)

            await Promo.deleteOne({ name: name.text })

            return msg.send(`–≤—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ ${name.text}.`)
        }
    }
    try {
        commands[msg.messagePayload.command]();
    } catch (e) {
        console.log(e);
    }
}

module.exports = {
    lsmanager
}